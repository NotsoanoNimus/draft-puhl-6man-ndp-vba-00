<?xml version="1.0" encoding="utf-8"?>
<!-- 
     draft-rfcxml-general-template-standard-00
  
     This template includes examples of the most commonly used features of RFCXML with comments 
     explaining how to customise them. This template can be quickly turned into an I-D by editing 
     the examples provided. Look for [REPLACE], [REPLACE/DELETE], [CHECK] and edit accordingly.
     Note - 'DELETE' means delete the element or attribute, not just the contents.
     
     Documentation is at https://authors.ietf.org/en/templates-and-schemas
-->
<?xml-model href="rfc7991bis.rnc"?>  <!-- Required for schema validation and schema-aware editing -->

<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<rfc
  xmlns:xi="http://www.w3.org/2001/XInclude"
  category="std"
  docName="draft-puhl-6man-ndp-vba-00"
  ipr="trust200902"
  obsoletes=""
  updates=""
  submissionType="IETF"
  xml:lang="en"
  version="3">
  <front>
    <title abbrev="ndp-vba">IPv6 Voucher-Based Address Generation &amp; verification</title>
    <seriesInfo name="Internet-Draft" value="draft-puhl-6man-ndp-vba-00"/>
    <author fullname="Zachary Tyler Puhl" initials="Z. T." surname="Puhl">
      <organization>University of Michigan</organization>
      <address>
        <postal>
          <city>Detroit</city>
          <country>US</country>
        </postal>
        <email>zpuhl@xmit.xyz</email>  
        <email>zpuhl@umich.edu</email>  
        <uri>https://xmit.xyz/</uri>
      </address>
    </author>
    <date year="2024"/>
    <area>Internet</area>
    <workgroup>IPv6 Maintenance</workgroup>
    <keyword>ipv6</keyword>
    <keyword>ndp</keyword>
    <keyword>vba</keyword>
    <keyword>spoofing</keyword>
    <keyword>privacy</keyword>
    <abstract>
      <t>
        This document specifies a new IPv6 unicast address generation and verification methodology for local
        networks. Individual interface identifiers are coupled to a set of deterministic output addresses, which
        remain outwardly private even if the interface identifier is stable. Distributed vouchers on-link are
        used to form a consensus between neighbors of the parameters used in the address derivation process.
        These vouchers are attached and distributed as an additional NDP option for Router Advertisements.
        Cryptographic key derivation functions are used to generate pseudo-random addresses and to also slow
        the computation of potential collisions. Voucher parameters are used to derive any number of both stable
        and ephemeral, privacy-focused addresses for each on-link prefix and at the link-local scope. NDP
        exchanges can then verify the interface-identifier-to-IP bindings to prevent on-path attacks in local
        networks.
      </t>
    </abstract>
  </front>


  <middle>
    <section anchor="intro">
      <name>Introduction</name>
      <t>
        <!-- TODO -->
        This document introduces Voucher-Based Addressing (VBA) in IPv6 networks as an optional functionality for Neighbor Discovery Protocol (NDP) <xref target="RFC4861"/>.
      </t>
      <t>
        VBAs operate on the principle that active spoofing requires the impersonation <!-- TODO -->
      </t>
      
      <section anchor="intro-requirements">
        <name>Specification of Requirements</name>
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
          "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT
          RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
          interpreted as described in BCP 14 <xref target="RFC2119"/>
          <xref target="RFC8174"/> when, and only when, they appear in
          all capitals, as shown here.
        </t>
      </section>

      <section anchor="intro-mod-summary">
        <name>Summary of NDP Modifications &amp; Requirements</name>
        <!-- special note in intro: this is LOW IMPACT!!! Only Vouchers & interface enablement (following behav. changes) are required for VBAs to work at the node level! -->
        <t>
        </t>
      </section>
    </section>

    <section anchor="terms">
      <name>Terms</name>
      <t>
      </t>
    </section>

    <section anchor="summary">
      <name>Voucher-Based Addressing</name>
      <t>
        This section outlines the design goals of Voucher-Based Addressing. It includes concrete processes and
        procedures used by VBA-enabled network nodes to verify address ownership and to simultaneously create
        pseudo-random network addresses.
      </t>

      <section anchor="summary-overview">
        <name>Design Overview</name>
        <t>
          A Voucher-Based Address is defined as any IPv6 unicast address derived from on-link voucher information.
          The address derivation process is driven by a static, well-known procedure parameterized by a mixture of
          voucher details and public node information. This same derivation process is used by other on-link nodes
          to independently verify the link-layer binding of the address during the Neighbor Discovery Address
          Resolution process.
        </t>
        <t>
          Because deterministic address generation directly depends on the value of the link-layer identifier of the
          node, purported network and target link-layer addresses cannot be falsified in NDP exchanges. Address
          verification is a process parameterized by (1) data which identifies the node's network interface, and (2)
          data which lies OUTSIDE of the generating node's administration. Such information comprises a part of the
          Link Voucher details agreed upon by all neighbors.
        </t>
        <t>
          Consider the following dishonest transactions a node on a VBA-enabled network might consider:
          <ul>
            <li>Generating a false link-layer address.</li>
          </ul>
        </t>
      </section>

      <section anchor="summary-generate">
        <name>Address Generation</name>
        <t>
        </t>
      </section>

      <section anchor="summary-verify">
        <name>Address Verification</name>
        <t>
        </t>
      </section>

      <section anchor="summary-binding">
        <name>Link-Layer Bindings &amp; Controversies</name>
        <t>
        </t>
      </section>

      <section anchor="summary-interfaces">
        <name>Interface-level Configurations</name>
        <t>
        </t>

        <section anchor="summary-interfaces-state">
          <name>Preserving Voucher-Related State</name>
          <t>
          </t>
        </section>

        <section anchor="summary-interfaces-mode">
          <name>Enforcement Modes</name>
          <t>
          </t>

          <section anchor="summary-interfaces-ago">
            <name>Address Generation Only (AGO)</name>
            <t>
            </t>
          </section>

          <section anchor="summary-interfaces-agv">
            <name>Address Generation &amp; Verification (AGV)</name>
            <t>
            </t>
          </section>

          <section anchor="summary-interfaces-agvl">
            <name>Address Generation &amp; Verification with Levels (AGVL)</name>
            <t>
            </t>
          </section>
        </section>
      </section>
    </section>

    <section anchor="addenda">
      <name>Neighbor Discovery Protocol Options</name>
      <t>The NDP option formats specified in this section MUST be supported to enable VBA functionality.</t>

      <section anchor="addenda-voucher">
        <name>Link Voucher Option</name>
        <t>
          The Link Voucher (LV) option specifies the address generation (and consequent verification)
          parameters which on-link hosts should agree upon when generating their addresses.
        </t>

        <figure>
          <name>Structure of the NDP Link Voucher option</name>
          <!-- TODO -->
          <artwork type="ascii-art" name="linkVoucherOption.txt">
            <![CDATA[
     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |     Type      |    Length     |   Pad Length  |   Reserved    |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    .                                                               .
    .                        CGA Parameters                         .
    .                                                               .
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    .                                                               .
    .                           Padding                             .
    .                                                               .
    |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]>
          </artwork>
        </figure>

        <dl newline="true">
          <dt>Type</dt><dd>63</dd>
          <dt>Length</dt><dd>The total length of the LV from the Type through its end -- inclusive -- in units of 8 octets.</dd>
          <!-- TODO: Add all parameter definitions per LV specification. -->
        </dl>

        <section anchor="addenda-voucher-senders">
          <name>Processing Rules for Senders</name>
          <t>
            Senders of Link Vouchers MUST maintain stateful information about their LVs at all times, so reliable and consistent
            LV details can be sent at any time. The rotation of stable LV information, such as the Seed value or Expiration details,
            SHOULD be signaled in advance using the LOVMA group <xref target="lovma-packets-pvr"/>. Transferral of LV responsibility
            to another LV identifier SHOULD use similar means <xref target="lovma-packets-vha"/>.
          </t>
          <t>The Sender's LV MUST always be unique on-link and NEVER be forwarded or duplicated copies of other LVs.</t>
          <t>
            Sending nodes wishing to distribute a Link Voucher MUST first check the local link for an already-active LV. This
            entails following a process of router discovery, then only assuming LV responsibility if no LV is already present.
            <ol>
              <li>Send a Router Soliciation to the All Routers multicast group at FF02::2.</li>
              <li>Wait for an LV for at least 2 seconds before sending another Soliciation.</li>
              <li>Repeat this process 2 more times.
                <ul>
                  <li>If an LV is received within a Router Advertisement response, accept and use the parameters of the received LV.
                    This condition means the sender MUST NOT send their own LV, nor should it propagate any instances of LV options.</li>
                  <li>If no LV is received after the 3 total attempts, and...
                    <ul>
                      <li>the Sender IS NOT a router: the Sender's LV may be distributed on the local link as an option attached
                        to an appropriate NDP Redirect packet.</li>
                      <li>the Sender IS a router: the Sender may attach its LV to an appropriate NDP Router Advertisement packet.</li>
                </ul>
              </li>
            </ol>
          </t>
          <t>
            On-link nodes responsible for an LV (also known as Voucher Bearers (VBs) -- see the VB section <xref target="bearers"/>)
            MUST respond to Router Soliciation packets. This is true regardless of  whether the VB is using a Redirect or Router
            Advertisement to distribute its LV.
          </t>
          <t>
            Protecting the link from rogue LVs is crucial to securely maintain the full consensus of the local network.
            See the section on RA-Guard <xref target="bearers-vigilance"/> and LV Hijacking <xref target="security-usurp"/>
            for more details.
        </section>

        <section anchor="addenda-voucher-receivers">
          <name>Processing Rules for Receivers</name>
          <!-- TODO -->
          <t>
            Receiving nodes MUST statefully maintain and update all LV information per-link, if and only if the received LV is
            successfully verified according to its cryptographic signature.
          </t>
          <t>A Link Voucher option appearing with any packet except NDP Router Advertisements or NDP Redirects MUST be ignored.</t>
          <t>
            Nodes acting as authorized Voucher Bearers <xref target="bearers"/> MUST disregard any received LV options on the links
            for which they are already the responsible VB.
          </t>
        </section>

        <section anchor="addenda-voucher-signatures">
          <name>Voucher Signatures</name>
          <t>
          </t>
        </section>

        <section anchor="addenda-voucher-expirations">
          <name>Voucher Expirations</name>
          <t>
          </t>
        </section>
      </section>

      <section anchor="addenda-voucher-summary">
        <name>ND Voucher Summary Option</name>
        <t>
        </t>

        <section anchor="addenda-voucher-senders">
          <name>Processing Rules for Senders</name>
          <t>
          </t>
        </section>

        <section anchor="addenda-voucher-receivers">
          <name>Processing Rules for Receivers</name>
          <t>
          </t>
        </section>
      </section>
    </section>

    <section anchor="behavioral">
      <name>Behavioral Neighbor Discovery Changes</name>
      <t>
      </t>

      <section anchor="behavioral-send">
        <name>Changes Adopted from SEND</name>
        <t>
        </t>

        <section anchor="behavioral-send-nonce">
          <name>Nonce Option</name>
          <t>
          </t>
        </section>

        <section anchor="behavioral-send-levels">
          <!-- See Section 8 of RFC 3971. -->
          <name>Secured &amp; Unsecured Distinctions</name>
          <t>
            Section x of the SEND RFC <xref target="RFC3971"/> defines a
          </t>
        </sections>
      </section>

      <section anchor="behavioral-cache">
        <name>Protecting the ND Cache</name>
        <t>
          The primary verification goal of VBAs results in a symmetric computation that can be costly for
          low-power nodes or other embedded systems. By requiring address verification ONLY when interacting
          with the local Neighbor Cache, nodes do not need to perform the entire verification procedure as
          frequently.
        </t>
        <t>
          This section discusses some behavioral NDP changes regarding the host's Neighbor Cache. The changes
          are aimed at a balanced mixture of optimization and security.
        </t>

        <section anchor="behavioral-cache-receiving">
          <name>Receiving Neighbor Solicitations</name>
          <!-- DO NOT EAGERLY CACHE WITHOUT VERIFYING. -->
          <t>
          </t>
        </section>

        <section anchor="behavioral-nud">
          <name>Neighbor Unreachability Detection</name>
          <t>
          </t>
        </section>

        <section anchor="behavioral-cache-unsolicited">
          <name>Receiving Unsolicited Traffic</name>
          <t>
            Any node receiving unsolicited traffic from a neighbor, for which no response is required from
            the receiver -- such as UDP-based applications -- does not need to interact with the VBA system
            at all. The receiving node MAY choose to validate the sender according to this specification.
            This would necessitate the neighbor verification process be conducted in reverse.
          </t>
          <t>
            If the sending neighbor is already in the receiver's neighbor cache, then the receiver SHOULD
            NOT verify the address of the sender.
          </t>
          <t>
            As stated in this document's introduction <xref target="intro"/>,
            VBA employment primarily supplies privacy-focused address generation and uses neighbor address
            verification to provide proof of address ownership. The goal is to prevent on-path attackers
            from illegally, ACTIVELY intercepting local network traffic. Therefore, receiving packets for
            which no response is necessary does not merit an explicit requirement that the sending neighbor
            be verified.
          </t>
        </section>
      </section>

      <section anchor="behavioral-dad">
        <name>Duplicate Address Detection</name>
        <t>
          When generating a VBA, the node MUST follow the ordinary means of Duplicate Address Detection (DAD)
          specified by the SLAAC RFC (section 5.4 of <xref target="RFC4862"/>). The DAD procedure SHOULD follow
          any other applicable DAD optimizations (<xref target="RFC4429"/>, <xref target="RFC7527"/>, etc.).
        </t>
        <t>
          Upon detecting a duplicate address, VBA-enabled nodes are forced by necessity to select another
          iterations count value to generate a non-conflicting address. This can become computationally expensive
          to recompute iteratively based on the amount of address collisions, or in the case of denial of service
          attacks. To counter this weakness, implementations MUST keep the 4 leading or trailing address computations
          cached during the DAD procedure. Implementations SHOULD always prefer the leading computations, because
          they are intermediate computations already required in order to produce the address at the final
          iterations count. This is as opposed to computing an extra 4 address values on the trailing side which
          may or may not be used based on DAD results.
        </t>
        <t>A figure representing this process visually is shown below:</t>
        <!-- TODO: Insert ASCII art figure. -->
        <t>
          To further cement this optimization procedure, an example DAD collision follows.
          <ol>
            <li>A new network host has received Link Voucher details; the voucher specifies using PBKDF2.</li>
            <li>The host arbitrarily selects 0xFF04 as its input link-local iterations count.</li>
            <li>The host will iterate the PBKDF2 function through 0xFEFF.</li>
            <li>When retrieving the PBKDF2 cipher output for 0xFF00 (L - 4) iterations, it will cache this value.</li>
            <li>It will do the same for the next 3 iterations counts (0xFF01, 0xFF02, &amp; 0xFF03).</li>
            <li>It will compute the final PBKDF2 round at 0xFF04 iterations, and will use the result to generate
              a valid VBA <xref target="summary-generate"/>.</li>
            <li>When following the DAD procedure, a collision is detected.</li>
            <li>The host then falls immediately back to the L - 1 iterations count of 0xFF03 to generate the VBA.</li>
            <li>This new host address is completely different and does not register a DAD collision.</li>
            <li>The optimization has successfully removed he need to recompute the PBKDF2 algorithm up to the new
              iterations count, saving a significant amount of time in the VBA-enabled SLAAC process.</li>
          </ol>
        </t>
        <t>
          If all 5 iterations counts result in DAD collisions, then the node MUST give up and use some other
          implementation-specific course of action to contact an administrator or log a system management error.
        </t>
        <t>
          Note that truly benign DAD collisions are a dangerous prospect for Voucher-Based Addressing. Address
          collisions imply that a separate link-layer identifier with the SAME iterations count has somehow
          generated a hash suffix collision, exposing the possibility for node impersonation in a rare occurrence.
          Some implementations MAY wish to find trusted ways to detect such an occurrence, possibly by means
          of intermediate device monitoring (such as switching hardware), and take action based on it.
        </t>
        <t>
          Nodes encountering a duplicate address will by necessity require a different iterations count to
          generate their current address. If the node uses a 'sticky' iterations count, then it is RECOMMENDED
          that it send a gratuitous VSR update to the LOVMA with the new count <xref target="lovma-vsr"/>.
        </t>
        <t>
          A discussion regarding denial of service attack vectors related to DAD in VBA networks is found in
          another section <xref target="security-dos-dad"/>.
        </t>
      </section>
    </section>

    <section anchor="lovma">
      <name>Local On-link Voucher Multicast Address (LOVMA)</name>
      <t>
      </t>

      <section anchor="lovma-purpose">
        <name>Definition &amp; Purpose</name>
        <t>
        </t>
      </section>

      <section anchor="lovma-constraints">
        <name>Constraints</name>
        <!-- no sending unicast responses, unidirectional channel; membership optional -->
        <t>
          Care should be taken when utilizing the LOVMA for any purpose, experimental or deployed,
          to regard the following constraints:
        </t>
        <ul>
          <li>LOVMA traffic is considered unidirectional. Nodes SHOULD NOT send unicast responses in reply to multicast traffic.
            This recommended constraint acts to prevent asymmetric traffic volume and potential denial of service vulnerabilites
            leveraging the LOVMA.</li>
          <li>VBA-enabled nodes MUST NOT assume that other VBA-enabled nodes are subscribed to the LOVMA multicast group.</li>
          <li>Subscribing nodes MUST NOT offer any trust of LOVMA packets, unless a datagram validation procedure is explicitly
            declared for the extension protocol using the LOVMA.</li>
        </ul>
      </section>

      <section anchor="lovma-packets">
        <name>Defined Datagrams</name>
        <t>
        </t>

        <section anchor="lovma-packets-vsr">
          <name>Voucher Status Reports (VSRs)</name>
          <t>
          </t>
        </section>

        <section anchor="lovma-packets-vha">
          <name>Voucher Handoff Advertisements (VHAs)</name>
          <t>
          </t>
        </section>

        <section anchor="lovma-packets-pvr">
          <name>Preemptive Voucher Rotations (PVRs)</name>
          <t>
          </t>
        </section>
      </section>

      <section anchor="lovma-extensibility">
        <name>Extensibility &amp; Experimentation</name>
        <t>
        </t>
      </section>
    </section>

    <section anchor="bearers">
      <name>Voucher Bearers</name>
      <t>
      </t>

      <section anchor="bearers-vigilance">
        <name>Vigilance &amp; RA-Guard</name>
        <t>
        </t>
      </section>

      <section anchor="bearers-unorthodox">
        <name>Unorthodox Bearers</name>
        <t>
        </t>
      </section>
    </section>

    <section anchor="optimizations">
      <name>Protocol Optimizations</name>
      <t>
      </t>

      <section anchor="optimizations-dad">
        <name>Duplicate Address Detection Caching</name>
        <t>
          The SLAAC DAD process is optimized to reduce the burden of regenerating another VBA from scratch.
          See <xref target="behavioral-dad"/> for how this optimization functions as part of the core VBA
          specification.
        </t>
      </section>

      <section anchor="optimizations-lovma">
        <name>Conveying Voucher-Related Information via the LOVMA</name>
        <t>
        </t>
      </section>

      <section anchor="optimizations-kdfs-et-al">
        <name>Choosing Key Derivation Functions &amp; Parameters</name>
        <t>
        </t>
      </section>
    </section>

    <section anchor="transitions">
      <name>Transition Mechanisms</name>
      <t>
      </t>
    </section>
    
    <section>
      <name>Body [REPLACE]</name>
      <t>Body text [REPLACE]</t>
      
      <ol>
        <li>Ordered list item [REPLACE/DELETE]</li>
      </ol>
      
      <ul>
        <li>Bulleted list item [REPLACE/DELETE]</li>
      </ul>
      
      <dl newline="true">
        <!-- Omit newline="true" if you want each definition to start on the same line as the corresponding term -->
        <dt>First term: [REPLACE/DELETE]</dt>
        <dd>Definition of the first term [REPLACE/DELETE]</dd>
        <dt>Second term: [REPLACE/DELETE]</dt>
        <dd>Definition of the second term [REPLACE/DELETE]</dd>
      </dl>
      
      <table>
        <thead>
        <!-- [REPLACE/DELETE] a table header is optional -->
          <tr><th>Column 1 [REPLACE]</th></tr>
        </thead>
        <tbody>
          <tr><td>Cell [REPLACE]</td></tr>
        </tbody>
      </table>

      <figure>
        <name>Source [REPLACE]</name>
        <sourcecode name="suggested filename [REPLACE/DELETE]" type="language [REPLACE/DELETE]" markers="true">
          <![CDATA[
source code goes here [REPLACE]
          ]]>
        </sourcecode>
        <!-- [CHECK] markers="true" means that the rendered file will have <CODE BEGINS> and <CODE ENDS> added -->
      </figure>

      <figure>
        <name>Diagram [REPLACE]</name>
        <artset>
        <!-- This <artset> includes two <artwork> elements, each of a different type -->
          <artwork type="svg" src="https://www.rfc-editor.org/materials/format/svg/stream.svg" />
          <!-- [REPLACE] src points to either a local file or a URI. -->
          <artwork type="ascii-art" name="stream.txt">
            <!-- [REPLACE/DELETE] name recommends a filename to use if the diagram is extracted -->  
            <![CDATA[
 ascii-art diagram goes here [REPLACE]
            ]]>
          </artwork>
        </artset>
      </figure>
    </section>
    
    <section anchor="Security">
      <name>Security Considerations</name>
      <t>
      </t>

      <section anchor="security-solutions">
        <name>How VBAs Balance Privacy &amp; Security</name>
        <t>
        </t>

        <section anchor="security-solutions-proof">
          <name>Proof of Address Ownership</name>
          <t>
          </t>
        </section>

        <section anchor="security-solutions-privacy">
          <name>Privacy-Focused Addresses</name>
          <t>
          </t>
        </section>
      </section>

      <section anchor="security-binding">
        <!-- From SEND:
            SEND does not compensate for an unsecured link layer.  For instance,
            there is no assurance that payload packets actually come from the
            same peer against which the NDP was run.
            Likewise, VBAs rely on the principle that link-lyer addresses MUST be unique on the same broadcast medium.
            VBAs offer great protection for unsecured L2 setups, but link-layer security would help to remediate further concerns.
        -->
        <name>Use of Link-Layer Bindings</name>
        <t>
        </t>
      </section>

      <section anchor="security-usurp">
        <name>Hijacking Link Vouchers</name>
        <t>
        </t>
      </section>

      <section anchor="security-dos">
        <name>Denial of Service</name>
        <t>
        </t>

        <section anchor="security-dos-dad">
          <name>Duplicate Address Detection</name>
          <!-- This spec leans on other DAD protection mechanisms. -->
          <t>
            The computational cost of generating VBAs can be abused by a malicious threat actor using DAD mechanisms.
          </t>
        </section>

        <section anchor="security-dos-grand">
          <name>Gratuitous Neighbor Discovery</name>
          <!-- RFC 9131 considerations. -->
          <t>
          </t>
        </section>
      </section>

      <section anchor="security-static">
        <name>Static Addressing</name>
        <t>
        </t>
      </section>

      <section anchor="security-collisions">
        <name>Hash Collisions</name>
        <t>
        </t>
      </section>

      <section anchor="security-fairness">
        <name>Computational Fairness</name>
        <t>
        </t>
      </section>

      <section anchor="security-pki">
        <name>Certifying Link Vouchers</name>
        <t>
        </t>
      </section>

      <section anchor="security-anycast">
        <name>Anycast Addresses</name>
        <t>
          Anycast addresses are allocated from the unicast address space and are thus indistinguishable to
          nodes establishing connections to them. NDP exchanges with these hosts may therefore respond with
          varying Target Link-Layer Address options and cause VBA verification to be unreliable.
          For this reason, it is NOT RECOMMENDED to utilize anycast addresses for on-link prefixes within
          VBA-enabled networks, because the ownership of the address cannot be bound to a particular
          link-layer identifier.
        </t>
        <t>
          The IPv6 Addressing Architecture RFC <xref target="RFC4291"/> outlines a Required Anycast Address
          in Section 2.6.1. VBA-enabled links SHOULD maintain compatibility with this requirement by disabling
          verification for on-link subnet anycast addresses. For example, a host using SLAAC to generate an
          address in the subnet 2001:db8:700::/64 SHOULD disable VBA expectations and verifications for the
          address 2001:db8:700::. Because VBA protections must be disabled for this target host, implementations
          SHOULD avoid using the subnet Required Anycast Address altogether.
        </t>
      </section>
    </section>
    
    <section anchor="IANA">
      <name>IANA Considerations</name>
      <t>
      </t>
    </section>
  </middle>


  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3971.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4861.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4862.xml"/>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4291.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4429.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7527.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9131.xml"/>
        <!-- key-derivation crypto resources -->
      </references>
      <!-- <references>
        <name>Informative References</name>
        <reference anchor="exampleRefMin">
          <front>
            <title>Title [REPLACE]</title>
            <author initials="Initials [REPLACE]" surname="Surname [REPLACE]">
              <organization/>
            </author>
            <date year="2006"/>
          </front>
        </reference>
        <reference anchor="exampleRefOrg" target="http://www.example.com/">
          <front>
            <title>Title [REPLACE]</title>
            <author>
              <organization>Organization [REPLACE]</organization>
            </author>
            <date year="1984"/>
          </front>
        </reference>       
      </references> -->
    </references>
    
    <section anchor="appendices">
      <name>Appendices</name>

      <section anchor="appendices-a">
        <name>Appendix A</name>
        <t>
        </t>
      </section>
    </section>
 </back>
</rfc>
